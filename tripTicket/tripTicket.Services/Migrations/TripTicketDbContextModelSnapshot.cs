// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tripTicket.Services.Database;

#nullable disable

namespace tripTicket.Services.Migrations
{
    [DbContext(typeof(TripTicketDbContext))]
    partial class TripTicketDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("tripTicket.Services.Database.Bookmark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Bookmark__541A3B713D54E270");

                    b.HasIndex("TripId");

                    b.HasIndex(new[] { "UserId", "TripId" }, "UQ_Bookmarks_User_Trip")
                        .IsUnique();

                    b.ToTable("Bookmarks");
                });

            modelBuilder.Entity("tripTicket.Services.Database.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("tripTicket.Services.Database.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("tripTicket.Services.Database.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .IsFixedLength();

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfTickets")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("TotalPayment")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Purchase__3214EC07591365F4");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("tripTicket.Services.Database.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("tripTicket.Services.Database.SupportReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("SupportReplies");
                });

            modelBuilder.Entity("tripTicket.Services.Database.SupportTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SupportTickets");
                });

            modelBuilder.Entity("tripTicket.Services.Database.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .IsFixedLength();

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PurchaseId")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .IsFixedLength();

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StripeTransactionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Transact__3214EC07E2C01878");

                    b.HasIndex("PurchaseId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("tripTicket.Services.Database.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableTickets")
                        .HasColumnType("int");

                    b.Property<decimal?>("CancellationFee")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DepartureCityId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DepartureDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateOnly?>("FreeCancellationUntil")
                        .HasColumnType("date");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<int?>("MinTicketsForDiscount")
                        .HasColumnType("int");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("PurchasedTickets")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ReturnDate")
                        .HasColumnType("date");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("TicketSaleEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("TransportType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TripStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Upcoming");

                    b.Property<string>("TripType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Trips__3214EC070626FA74");

                    b.HasIndex("CityId");

                    b.HasIndex("DepartureCityId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("tripTicket.Services.Database.TripDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__TripDays__3214EC07B361AFC1");

                    b.HasIndex("TripId");

                    b.ToTable("TripDays");
                });

            modelBuilder.Entity("tripTicket.Services.Database.TripDayItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.Property<int?>("TripDayId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__TripDayI__3214EC07A190E9A4");

                    b.HasIndex("TripDayId");

                    b.ToTable("TripDayItems");
                });

            modelBuilder.Entity("tripTicket.Services.Database.TripStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("TotalDiscountsApplied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0.00m);

                    b.Property<decimal?>("TotalRevenue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0.00m);

                    b.Property<int?>("TotalTicketsSold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("TotalViews")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__TripStat__9B3192CC57176F94");

                    b.HasIndex("TripId");

                    b.ToTable("TripStatistics");
                });

            modelBuilder.Entity("tripTicket.Services.Database.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC072EFF9310");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D105340E77BC21")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("tripTicket.Services.Database.UserRecommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(6,5)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId", "TripId")
                        .IsUnique();

                    b.ToTable("UserRecommendations", (string)null);
                });

            modelBuilder.Entity("tripTicket.Services.Database.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("tripTicket.Services.Database.Bookmark", b =>
                {
                    b.HasOne("tripTicket.Services.Database.Trip", "Trip")
                        .WithMany("Bookmarks")
                        .HasForeignKey("TripId")
                        .IsRequired()
                        .HasConstraintName("FK_Bookmarks_Trip");

                    b.HasOne("tripTicket.Services.Database.User", "User")
                        .WithMany("Bookmarks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Bookmarks_User");

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("tripTicket.Services.Database.City", b =>
                {
                    b.HasOne("tripTicket.Services.Database.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("tripTicket.Services.Database.Purchase", b =>
                {
                    b.HasOne("tripTicket.Services.Database.Trip", "Trip")
                        .WithMany("TripPurchases")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tripTicket.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("tripTicket.Services.Database.SupportReply", b =>
                {
                    b.HasOne("tripTicket.Services.Database.SupportTicket", "Ticket")
                        .WithMany("Replies")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tripTicket.Services.Database.User", null)
                        .WithMany("SupportReplies")
                        .HasForeignKey("UserId");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("tripTicket.Services.Database.SupportTicket", b =>
                {
                    b.HasOne("tripTicket.Services.Database.User", "User")
                        .WithMany("SupportTickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("tripTicket.Services.Database.Transaction", b =>
                {
                    b.HasOne("tripTicket.Services.Database.Purchase", "Purchase")
                        .WithMany("Transactions")
                        .HasForeignKey("PurchaseId")
                        .IsRequired()
                        .HasConstraintName("FK__Transacti__Purch__49C3F6B7");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("tripTicket.Services.Database.Trip", b =>
                {
                    b.HasOne("tripTicket.Services.Database.City", "City")
                        .WithMany("Trips")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("tripTicket.Services.Database.City", "DepartureCity")
                        .WithMany()
                        .HasForeignKey("DepartureCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("DepartureCity");
                });

            modelBuilder.Entity("tripTicket.Services.Database.TripDay", b =>
                {
                    b.HasOne("tripTicket.Services.Database.Trip", "Trip")
                        .WithMany("TripDays")
                        .HasForeignKey("TripId")
                        .HasConstraintName("FK__TripDays__TripId__4222D4EF");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("tripTicket.Services.Database.TripDayItem", b =>
                {
                    b.HasOne("tripTicket.Services.Database.TripDay", "TripDay")
                        .WithMany("TripDayItems")
                        .HasForeignKey("TripDayId")
                        .HasConstraintName("FK__TripDayIt__TripD__44FF419A");

                    b.Navigation("TripDay");
                });

            modelBuilder.Entity("tripTicket.Services.Database.TripStatistic", b =>
                {
                    b.HasOne("tripTicket.Services.Database.Trip", "Trip")
                        .WithMany("TripStatistics")
                        .HasForeignKey("TripId")
                        .IsRequired()
                        .HasConstraintName("FK_TripStatistics_Trip");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("tripTicket.Services.Database.UserRecommendation", b =>
                {
                    b.HasOne("tripTicket.Services.Database.Trip", "Trip")
                        .WithMany("UserRecommendations")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tripTicket.Services.Database.User", "User")
                        .WithMany("Recommendations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("tripTicket.Services.Database.UserRole", b =>
                {
                    b.HasOne("tripTicket.Services.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tripTicket.Services.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("tripTicket.Services.Database.City", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("tripTicket.Services.Database.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("tripTicket.Services.Database.Purchase", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("tripTicket.Services.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("tripTicket.Services.Database.SupportTicket", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("tripTicket.Services.Database.Trip", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("TripDays");

                    b.Navigation("TripPurchases");

                    b.Navigation("TripStatistics");

                    b.Navigation("UserRecommendations");
                });

            modelBuilder.Entity("tripTicket.Services.Database.TripDay", b =>
                {
                    b.Navigation("TripDayItems");
                });

            modelBuilder.Entity("tripTicket.Services.Database.User", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Recommendations");

                    b.Navigation("SupportReplies");

                    b.Navigation("SupportTickets");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
